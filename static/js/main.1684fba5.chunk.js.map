{"version":3,"sources":["Snap/SnapButton.jsx","Snap/effect.js","Snap/SnapWrapper.jsx","App.js","serviceWorker.js","index.js","assets/image.png"],"names":["SnapButton","onClick","type","id","value","imageDataArray","chance","Chance","createCanvas","element","html2canvas","then","canvas","childNodes","forEach","node","style","visibility","imageData","getContext","getImageData","offsetWidth","offsetHeight","pixelArr","data","createBlankImageData","i","length","p","Math","floor","a","weightedRandomDistrib","container","document","createElement","classList","add","c","newCanvasFromImageData","appendChild","$","children","not","fadeOut","each","index","animateBlur","this","setTimeout","animateTransform","integer","min","max","delay","remove","peak","prob","seq","push","pow","abs","weighted","elem","radius","duration","rad","animate","easing","step","now","css","filter","sx","sy","angle","td","tx","ty","x","y","deg","fx","prop","transform","arr","Uint8ClampedArray","j","w","h","width","height","putImageData","ImageData","resolveAfterMs","Promise","resolve","SnapWrapper","resume","eleRef","useRef","useState","snap","setSnap","useEffect","current","create","transformedChildren","ref","position","App","className","alt","src","image","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.1684fba5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SnapButton = ({ onClick }) => {\r\n  return <input type=\"button\" id=\"snap-btn\" value=\"Oh, Snap!\" onClick={onClick} />;\r\n};\r\n\r\nexport default SnapButton;\r\n","/* eslint-disable no-useless-concat */\r\n/* eslint-disable no-unused-vars */\r\nimport html2canvas from \"html2canvas\";\r\nimport Chance from \"chance\";\r\nimport $ from \"jquery\";\r\n\r\nimport \"jquery-ui/ui/effects/effect-slide\";\r\n\r\nlet imageDataArray = [];\r\nlet canvasCount = 35;\r\nconst chance = new Chance();\r\n\r\nexport const createCanvas = (element) => {\r\n  html2canvas(element).then((canvas) => {\r\n    element.childNodes.forEach((node) => (node.style.visibility = \"hidden\"));\r\n    //capture all div data as image\r\n    let ctx = canvas.getContext(\"2d\");\r\n    // console.log(\"canvas width: \" + canvas.width)\r\n    // console.log(\"canvas height: \" + canvas.height)\r\n    // console.log(\"element.offsetWidth: \" + element.offsetWidth)\r\n    // console.log(\"element.offsetHeight: \" + element.offsetHeight)\r\n    let imageData = ctx.getImageData(\r\n      0,\r\n      0,\r\n      element.offsetWidth,\r\n      element.offsetHeight\r\n      // canvas.width,\r\n      // canvas.height\r\n    );\r\n    let pixelArr = imageData.data;\r\n    createBlankImageData(imageData);\r\n    //put pixel info to imageDataArray (Weighted Distributed)\r\n    for (let i = 0; i < pixelArr.length; i += 4) {\r\n      //find the highest probability canvas the pixel should be in\r\n      let p = Math.floor((i / pixelArr.length) * canvasCount);\r\n      let a = imageDataArray[weightedRandomDistrib(p)];\r\n      a[i] = pixelArr[i];\r\n      a[i + 1] = pixelArr[i + 1];\r\n      a[i + 2] = pixelArr[i + 2];\r\n      a[i + 3] = pixelArr[i + 3];\r\n    }\r\n    //create canvas for each imageData and append to target element\r\n    let container = document.createElement(\"div\");\r\n    container.classList.add(\"canvas_container\");\r\n    // container;\r\n    for (let i = 0; i < canvasCount; i++) {\r\n      let c = newCanvasFromImageData(\r\n        imageDataArray[i],\r\n        element.offsetWidth,\r\n        element.offsetHeight\r\n        // canvas.width,\r\n        // canvas.height\r\n      );\r\n      c.classList.add(\"dust\");\r\n      container.appendChild(c);\r\n    }\r\n    element.appendChild(container);\r\n    //clear all children except the canvas\r\n    $(\".content\").children().not(\".dust\").fadeOut(3500);\r\n    //apply animation\r\n    $(\".dust\").each(function (index) {\r\n      animateBlur($(this), 0.8, 800);\r\n      setTimeout(() => {\r\n        animateTransform(\r\n          $(this),\r\n          100,\r\n          -100,\r\n          chance.integer({ min: -15, max: 15 }),\r\n          800 + 110 * index\r\n        );\r\n      }, 70 * index);\r\n      //remove the canvas from DOM tree when faded\r\n      $(this)\r\n        .delay(70 * index)\r\n        .fadeOut(110 * index + 800, \"easeInQuint\", () => {\r\n          $(this).remove();\r\n        });\r\n    });\r\n  });\r\n};\r\n\r\nconst weightedRandomDistrib = (peak) => {\r\n  var prob = [],\r\n    seq = [];\r\n  for (let i = 0; i < canvasCount; i++) {\r\n    prob.push(Math.pow(canvasCount - Math.abs(peak - i), 3));\r\n    seq.push(i);\r\n  }\r\n  return chance.weighted(seq, prob);\r\n};\r\n\r\nconst snapAnimation = (element) => {\r\n  //clear all children except the canvas\r\n  element.children().not(\".dust\").fadeOut(3500);\r\n  //apply animation\r\n  $(\".dust\").each(function (index) {\r\n    animateBlur($(this), 0.8, 800);\r\n    setTimeout(() => {\r\n      animateTransform(\r\n        $(this),\r\n        100,\r\n        -100,\r\n        chance.integer({ min: -15, max: 15 }),\r\n        800 + 110 * index\r\n      );\r\n    }, 70 * index);\r\n    //remove the canvas from DOM tree when faded\r\n    $(this)\r\n      .delay(70 * index)\r\n      .fadeOut(110 * index + 800, \"easeInQuint\", () => {\r\n        $(this).remove();\r\n      });\r\n  });\r\n};\r\n\r\nexport const animateBlur = (elem, radius, duration) => {\r\n  let r = 0;\r\n  $({ rad: 0 }).animate(\r\n    { rad: radius },\r\n    {\r\n      duration: duration,\r\n      easing: \"easeOutQuad\",\r\n      step: function (now) {\r\n        elem.css({\r\n          filter: \"blur(\" + now + \"px)\",\r\n        });\r\n      },\r\n    }\r\n  );\r\n};\r\n\r\nexport const animateTransform = (elem, sx, sy, angle, duration) => {\r\n  let td,\r\n    tx,\r\n    ty = 0;\r\n  $({ x: 0, y: 0, deg: 0 }).animate(\r\n    { x: sx, y: sy, deg: angle },\r\n    {\r\n      duration: duration,\r\n      easing: \"easeInQuad\",\r\n      step: function (now, fx) {\r\n        if (fx.prop === \"x\") {\r\n          tx = now;\r\n        } else if (fx.prop === \"y\") {\r\n          ty = now;\r\n        } else if (fx.prop === \"deg\") {\r\n          td = now;\r\n        }\r\n        elem.css({\r\n          transform:\r\n            \"rotate(\" + td + \"deg)\" + \"translate(\" + tx + \"px,\" + ty + \"px)\",\r\n        });\r\n      },\r\n    }\r\n  );\r\n};\r\n\r\nexport const createBlankImageData = (imageData) => {\r\n  for (let i = 0; i < canvasCount; i++) {\r\n    let arr = new Uint8ClampedArray(imageData.data);\r\n    for (let j = 0; j < arr.length; j++) {\r\n      arr[j] = 0;\r\n    }\r\n    imageDataArray.push(arr);\r\n  }\r\n};\r\n\r\nexport const newCanvasFromImageData = (imageDataArray, w, h) => {\r\n  let canvas = document.createElement(\"canvas\");\r\n  canvas.width = w;\r\n  canvas.height = h;\r\n  let tempCtx = canvas.getContext(\"2d\");\r\n  tempCtx.putImageData(new ImageData(imageDataArray, w, h), 0, 0);\r\n  return canvas;\r\n};\r\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { createCanvas } from \"./effect\";\r\nimport SnapButton from \"./SnapButton\";\r\n\r\nfunction resolveAfterMs(delay) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(\"resolved\");\r\n    }, delay);\r\n  });\r\n}\r\n\r\nconst SnapWrapper = ({ children, delay, resume }) => {\r\n  const eleRef = useRef(null);\r\n  const [snap, setSnap] = useState(false);\r\n  useEffect(() => {\r\n    const create = async () => {\r\n      if (eleRef && snap) {\r\n        await resolveAfterMs(delay);\r\n        // console.log(`SNAP!`);\r\n        createCanvas(eleRef.current);\r\n        if (resume === \"auto\" || 1) {\r\n          await resolveAfterMs(delay * 5);\r\n          // console.log(delay * 5);\r\n          setSnap(false);\r\n          // setting setSnap to false will bring image back after delay\r\n          // setting it to true, need to click button again to bring image back\r\n        }\r\n      }\r\n    };\r\n    create();\r\n    //   }, [snap]);\r\n  }, [delay, resume, snap]);\r\n  const transformedChildren = (\r\n    <div ref={eleRef} style={{ position: \"relative\" }}>\r\n      {children}\r\n    </div>\r\n  );\r\n  return (\r\n    <>\r\n      {snap ? transformedChildren : children}\r\n      <div>\r\n        <SnapButton onClick={() => setSnap(!snap)} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default SnapWrapper;\r\n","import React from \"react\";\nimport image from \"./assets/image.png\";\nimport { SnapWrapper } from \"../src/Snap/index\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SnapWrapper delay={2000} resume=\"auto\">\n        <img alt={\"\"} src={image} />\n      </SnapWrapper>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/image.9cd83ab1.png\";"],"sourceRoot":""}